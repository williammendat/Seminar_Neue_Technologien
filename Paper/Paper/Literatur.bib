%! Author = Willy
%! Date = 09.09.2021
% This file was created with Citavi 6.10.0.0
@book{C++HighPer2,
    author = {Andrist, B. and Sehr, V. and Garney, B.},
    year = {2020},
    title = {C++ High Performance: Master the Art of Optimizing the Functioning of Your C++ Code, 2nd Edition},
    url = {https://books.google.de/books?id=U9XczQEACAAJ},
    publisher = {{Packt Publishing}},
    isbn = {9781839216541}
}


@article{TechnicalReport,
    author = {{Dave Abrahams}},
    title = {Technical Report on C++ Performance},
    url = {http://www.open-std.org/jtc1/sc22/wg21/docs/TR18015.pdf},
    Urldate = {2021.09.06},
    file = {Microsoft Word - TR18015:Attachments/Microsoft Word - TR18015.pdf:application/pdf}
}


@book{OptimizedC++,
    author = {Guntheroth, Kurt},
    year = {2016},
    title = {Optimized C++},
    url = {http://proquest.tech.safaribooksonline.de/9781491922057},
    address = {Sebastopol, CA},
    edition = {First edition},
    publisher = {O'Reilly},
    isbn = {9781491922064}
}


@article{ISOC++,
    author = {{H. Hinnant, R. Orr, B. Stroustrup, D. Vandevoorde, M. Wong}},
    title = {DIRECTION FOR ISO C++},
    url = {http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0939r4.pdf},
    Urldate = {2021.08.27},
    file = {p0939r4:Attachments/p0939r4.pdf:application/pdf}
}


@book{HandsOn,
    author = {Krajewski, M.},
    year = {2019},
    title = {Hands-On High Performance Programming with Qt 5: Build cross-platform applications using concurrency, parallel programming, and memory management},
    url = {https://books.google.de/books?id=kiWGDwAAQBAJ},
    publisher = {{Packt Publishing}},
    isbn = {9781789533309}
}


@book{EffectiveC++,
    abstract = {42 specific ways to improve your use of C++11 and C++14},
    author = {Meyers, Scott},
    year = {2015},
    title = {Effective modern C++: 42 specific ways to improve your use of C++11 and C++14},
    url = {http://proquest.tech.safaribooksonline.de/9781491908419},
    address = {Sebastopol, CA},
    edition = {Online-Ausg},
    publisher = {{O'Reilly Media}},
    isbn = {9781491903995}
}


@misc{OverheadExceptions,
    abstract = {C++ exceptions have their place, but using an alternative is recommended for general program flow control.},
    author = {Nayar, Amit},
    year = {2021},
    title = {Investigating the Performance Overhead of C++ Exceptions | PSPDFKit},
    url = {https://pspdfkit.com/blog/2020/performance-overhead-of-exceptions-in-cpp/},
    Urldate = {2021.09.06}
}


@misc{ISOIEC,
    abstract = {Die Norm ISO/IEC 9126 stellt eines von mehreren Modellen dar, um Softwarequalit{\"a}t sicherzustellen. Es bezieht sich mit seinen Kriterien ausschlie{\ss}lich auf die Qualit{\"a}t der Software als 'Produkt' (Produktqualit{\"a}t), nicht oder nur indirekt ({\"u}ber die Ergebnisse) auf die Qualit{\"a}t der Softwareentwicklungsprozesse (Prozessqualit{\"a}t).
    Diese ISO-Norm ist in der Norm ISO/IEC 25000 aufgegangen und ist durch ebendiese Norm ersetzt.},
    editor = {Wikipedia},
    year = {2018},
    title = {ISO/IEC 9126},
    url = {https://de.wikipedia.org/w/index.php?title=ISO/IEC_9126&oldid=177832067},
    Urldate = {2021.08.27}
}

@online{ChernoCopy,
    title = {Copying and Copy Constructors},
    date = {2017},
    organization = {Youtube},
    author = {TheCherno},
    url = {https://www.youtube.com/watch?v=BvR1Pgzzr38\&list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb\&index
	=45},
}

@inproceedings{VisualisingC++,
    author = {Porkol{\'a}b, Zolt{\'a}n and Brunner, Tibor and Krupp, D{\'a}niel and Csord{\'a}s, M{\'a}rton},
    title = {Visualising Compiler-generated Special Member Functions of C++ Types},
    url = {https://www.researchgate.net/profile/Richard-Szalay/publication/328689423_Visualising_Compiler-generated_Special_Member_Functions_of_C_Types/links/5bdc3dbfa6fdcc3a8db8938c/Visualising-Compiler-generated-Special-Member-Functions-of-C-Types.pdf},
    urldate = {12.09.2021},
    pages = {361--369},
    publisher = {IEEE},
    isbn = {9781450357142},
    editor = {Khomh, Foutse and Roy, Chanchal K. and Siegmund, Janet},
    booktitle = {2018 ACMIEEE 26th International Conference on Program Comprehension},
    year = {2018},
    address = {Piscataway, NJ},
    doi = {10.1145/3196321.3197546},
    file = {Visualising-Compiler-generated-Special-Member-Functions-of-C-Types:Attachments/Visualising-Compiler-generated-Special-Member-Functions-of-C-Types.pdf:application/pdf}
}

@inproceedings{TemplatesVorteil,
    abstract = {In the last few years, many scientific applications have been developed for powerful graphics processing units (GPUs) and have achieved remarkable speedups. This success can be partially attributed to high performance host callable GPU library routines that are offloaded to GPUs at runtime. These library routines are based on C/C++-like programming toolkits such as CUDA from NVIDIA and have the same calling signatures as their CPU counterparts. Recently, with the sufficient support of C++ templates from CUDA, the emergence of template libraries have enabled further advancement in code reusability and rapid software development for GPUs. However, Expression Templates (ET), which have been very popular for implementing data parallel scientific software for host CPUs because of their intuitive and mathematics-like syntax, have been underutilized by GPU development libraries. The lack of ET usage is caused by the difficulty of offloading expression templates from hosts to GPUs due to the inability to pass instantiated expressions to GPU kernels as well as the absence of the exact form of the expressions for the templates at the time of coding. This paper presents a general approach that enables automatic offloading of C++ expression templates to CUDA enabled GPUs by using the C++ metaprogramming technique and Just-In-Time (JIT) compilation methodology to generate and compile CUDA kernels for corresponding expression templates followed by executing the kernels with appropriate arguments. This approach allows developers to port applications to run on GPUs with virtually no code modifications. More specifically, this paper uses a large ET based data parallel physics library called QDP++ as an example to illustrate many aspects of the approach to offload expression templates automatically and to demonstrate very good speedups for typical QDP++ applications running on GPUs against running on CPUs using this method of offloading. In addition, this approach of automatic offloading expression templates could be applied to other many-core accelerators that provide C++ programming toolkits with the support of C++ template.},
    author = {{J. Chen} and {B. Joo} and {W. Watson III} and {R. Edwards}},
    title = {Automatic Offloading C++ Expression Templates to CUDA Enabled GPUs},
    pages = {2359--2368},
    booktitle = {2012 IEEE 26th International Parallel and Distributed Processing Symposium Workshops {\&} PhD Forum},
    year = {2012},
    doi = {10.1109/IPDPSW.2012.293}
}

@article{Exception1998,
    author = {Schilling, Jonathan L.},
    year = {1998},
    title = {Optimizing away C++ exception handling},
    pages = {40--47},
    volume = {33},
    number = {8},
    issn = {0362-1340},
    journal = {ACM SIGPLAN Notices},
    doi = {10.1145/286385.286390}
}